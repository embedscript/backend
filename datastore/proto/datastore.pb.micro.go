// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/datastore.proto

package datastore

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Datastore service

func NewDatastoreEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Datastore service

type DatastoreService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...client.CallOption) (*CreateIndexResponse, error)
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...client.CallOption) (*CreateRuleResponse, error)
	ReadRules(ctx context.Context, in *ReadRulesRequest, opts ...client.CallOption) (*ReadRulesResponse, error)
}

type datastoreService struct {
	c    client.Client
	name string
}

func NewDatastoreService(name string, c client.Client) DatastoreService {
	return &datastoreService{
		c:    c,
		name: name,
	}
}

func (c *datastoreService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Datastore.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "Datastore.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.name, "Datastore.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Datastore.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreService) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...client.CallOption) (*CreateIndexResponse, error) {
	req := c.c.NewRequest(c.name, "Datastore.CreateIndex", in)
	out := new(CreateIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreService) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...client.CallOption) (*CreateRuleResponse, error) {
	req := c.c.NewRequest(c.name, "Datastore.CreateRule", in)
	out := new(CreateRuleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreService) ReadRules(ctx context.Context, in *ReadRulesRequest, opts ...client.CallOption) (*ReadRulesResponse, error) {
	req := c.c.NewRequest(c.name, "Datastore.ReadRules", in)
	out := new(ReadRulesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Datastore service

type DatastoreHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	CreateIndex(context.Context, *CreateIndexRequest, *CreateIndexResponse) error
	CreateRule(context.Context, *CreateRuleRequest, *CreateRuleResponse) error
	ReadRules(context.Context, *ReadRulesRequest, *ReadRulesResponse) error
}

func RegisterDatastoreHandler(s server.Server, hdlr DatastoreHandler, opts ...server.HandlerOption) error {
	type datastore interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		CreateIndex(ctx context.Context, in *CreateIndexRequest, out *CreateIndexResponse) error
		CreateRule(ctx context.Context, in *CreateRuleRequest, out *CreateRuleResponse) error
		ReadRules(ctx context.Context, in *ReadRulesRequest, out *ReadRulesResponse) error
	}
	type Datastore struct {
		datastore
	}
	h := &datastoreHandler{hdlr}
	return s.Handle(s.NewHandler(&Datastore{h}, opts...))
}

type datastoreHandler struct {
	DatastoreHandler
}

func (h *datastoreHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.DatastoreHandler.Create(ctx, in, out)
}

func (h *datastoreHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.DatastoreHandler.Update(ctx, in, out)
}

func (h *datastoreHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.DatastoreHandler.Read(ctx, in, out)
}

func (h *datastoreHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.DatastoreHandler.Delete(ctx, in, out)
}

func (h *datastoreHandler) CreateIndex(ctx context.Context, in *CreateIndexRequest, out *CreateIndexResponse) error {
	return h.DatastoreHandler.CreateIndex(ctx, in, out)
}

func (h *datastoreHandler) CreateRule(ctx context.Context, in *CreateRuleRequest, out *CreateRuleResponse) error {
	return h.DatastoreHandler.CreateRule(ctx, in, out)
}

func (h *datastoreHandler) ReadRules(ctx context.Context, in *ReadRulesRequest, out *ReadRulesResponse) error {
	return h.DatastoreHandler.ReadRules(ctx, in, out)
}
